name: Android CI/CD - Build APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Build type'
        required: true
        default: 'debug'
        type: choice
        options:
        - debug
        - release

jobs:
  build:
    name: Build Android APK
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: '11076708'
          accept-android-sdk-licenses: true
          log-accepted-android-sdk-licenses: false

      - name: Install Android SDK components
        run: |
          echo "📱 Installing required Android SDK components..."
          sdkmanager --install "platform-tools" "build-tools;34.0.0" "platforms;android-34"
          sdkmanager --licenses >/dev/null 2>&1 || true

      - name: Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Fix Gradle wrapper version
        run: |
          echo "🔧 Setting up Gradle 8.7 wrapper..."
          # Remove existing gradle wrapper files to avoid conflicts
          rm -rf gradle/wrapper/gradle-wrapper.jar gradle/wrapper/gradle-wrapper.properties
          # Generate proper gradle wrapper with specific version
          gradle wrapper --gradle-version 8.7 --distribution-type bin
          chmod +x gradlew
          
          echo "✅ Gradle wrapper configured:"
          cat gradle/wrapper/gradle-wrapper.properties

      - name: Validate Gradle wrapper (with retry)
        run: |
          echo "🔍 Validating Gradle wrapper..."
          # Simple validation without external dependencies
          if [ -f "gradle/wrapper/gradle-wrapper.properties" ] && [ -f "gradle/wrapper/gradle-wrapper.jar" ]; then
            echo "✅ Gradle wrapper files exist"
            ./gradlew --version || echo "⚠️ Gradle version check failed, continuing..."
          else
            echo "❌ Gradle wrapper files missing"
            exit 1
          fi

      - name: Check for Release Secrets
        id: check_secrets
        run: |
          if [ "${{ github.event.inputs.release_type }}" = "release" ]; then
            if [ -n "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" ]; then
              echo "has_keystore=true" >> $GITHUB_OUTPUT
              echo "✅ Keystore secrets available for release signing"
            else
              echo "has_keystore=false" >> $GITHUB_OUTPUT
              echo "⚠️ No keystore secrets - will build unsigned release"
            fi
          else
            echo "has_keystore=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Debug build - no keystore needed"
          fi

      - name: Setup Keystore for Release
        if: steps.check_secrets.outputs.has_keystore == 'true'
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > keystore.jks
          echo "ANDROID_KEYSTORE_PATH=$PWD/keystore.jks" >> $GITHUB_ENV
          echo "ANDROID_KEYSTORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
          echo "ANDROID_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}" >> $GITHUB_ENV
          echo "ANDROID_KEY_ALIAS_PASSWORD=${{ secrets.ANDROID_KEY_ALIAS_PASSWORD }}" >> $GITHUB_ENV
          echo "🔐 Keystore configured for release signing"

      - name: Clean project
        run: |
          echo "🧹 Cleaning project..."
          ./gradlew clean --stacktrace

      - name: Build Debug APK
        if: github.event.inputs.release_type != 'release'
        run: |
          echo "🏗️ Building Debug APK..."
          ./gradlew assembleDebug --stacktrace --info --no-daemon
          
      - name: Build Release APK (Signed)
        if: github.event.inputs.release_type == 'release' && steps.check_secrets.outputs.has_keystore == 'true'
        run: |
          echo "🏗️ Building Signed Release APK..."
          ./gradlew assembleRelease --stacktrace --info --no-daemon

      - name: Build Release APK (Unsigned)
        if: github.event.inputs.release_type == 'release' && steps.check_secrets.outputs.has_keystore == 'false'
        run: |
          echo "🏗️ Building Unsigned Release APK..."
          echo "⚠️ No keystore provided - building unsigned release APK"
          echo "To sign releases, add these secrets to your repository:"
          echo "- ANDROID_KEYSTORE_BASE64 (base64 encoded .jks file)"
          echo "- ANDROID_KEYSTORE_PASSWORD"
          echo "- ANDROID_KEY_ALIAS" 
          echo "- ANDROID_KEY_ALIAS_PASSWORD"
          ./gradlew assembleRelease --stacktrace --info --no-daemon

      - name: List build outputs
        if: always()
        run: |
          echo "📋 Build outputs:"
          find app/build/outputs -name "*.apk" -exec ls -la {} \; || echo "No APK files found"

      - name: Prepare APK artifacts
        run: |
          mkdir -p build-outputs
          
          # Find and copy APK files
          if find app/build/outputs/apk -name "*.apk" -exec cp {} build-outputs/ \; 2>/dev/null; then
            echo "✅ APK files copied to build-outputs"
          else
            echo "❌ No APK files found to copy"
            exit 1
          fi
          
          # Rename files for clarity
          cd build-outputs
          for file in *.apk; do
            if [[ "$file" == *"debug"* ]]; then
              new_name="LayoutOrchestrator-debug-$(date +%Y%m%d-%H%M).apk"
              mv "$file" "$new_name"
              echo "📱 Debug APK: $new_name"
            elif [[ "$file" == *"release"* ]]; then
              if [ "${{ steps.check_secrets.outputs.has_keystore }}" = "true" ]; then
                new_name="LayoutOrchestrator-release-signed-$(date +%Y%m%d-%H%M).apk"
              else
                new_name="LayoutOrchestrator-release-unsigned-$(date +%Y%m%d-%H%M).apk"
              fi
              mv "$file" "$new_name"
              echo "📱 Release APK: $new_name"
            fi
          done
          
          echo "📱 Final APK files:"
          ls -la *.apk

      - name: Upload APK Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: LayoutOrchestrator-APKs-${{ github.run_number }}
          path: build-outputs/*.apk
          retention-days: 30
          if-no-files-found: error

      - name: Upload Build Reports (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-reports-${{ github.run_number }}
          path: |
            app/build/reports/
            build/reports/
          retention-days: 7
          if-no-files-found: ignore

      - name: Generate Build Summary
        if: always()
        run: |
          echo "## 🏗️ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Type:** ${{ github.event.inputs.release_type || 'debug' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Keystore Available:** ${{ steps.check_secrets.outputs.has_keystore }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "build-outputs" ]; then
            echo "### 📱 Generated APKs:" >> $GITHUB_STEP_SUMMARY
            cd build-outputs
            for apk in *.apk; do
              if [ -f "$apk" ]; then
                size=$(stat -f%z "$apk" 2>/dev/null || stat -c%s "$apk" 2>/dev/null || echo "unknown")
                echo "- $apk (${size} bytes)" >> $GITHUB_STEP_SUMMARY
              fi
            done
            cd ..
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📥 Download Instructions:" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to the **Actions** tab in your repository" >> $GITHUB_STEP_SUMMARY
          echo "2. Click on this workflow run" >> $GITHUB_STEP_SUMMARY
          echo "3. Scroll down to **Artifacts** section" >> $GITHUB_STEP_SUMMARY
          echo "4. Download the \`LayoutOrchestrator-APKs-${{ github.run_number }}\` ZIP file" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check_secrets.outputs.has_keystore }}" = "false" ] && [ "${{ github.event.inputs.release_type }}" = "release" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ⚠️ Release Signing Notice:" >> $GITHUB_STEP_SUMMARY
            echo "This is an **unsigned** release APK. To generate signed releases:" >> $GITHUB_STEP_SUMMARY
            echo "1. Create a keystore: \`keytool -genkey -v -keystore release.jks -keyalg RSA -keysize 2048 -validity 10000 -alias release\`" >> $GITHUB_STEP_SUMMARY
            echo "2. Encode to base64: \`base64 -i release.jks\`" >> $GITHUB_STEP_SUMMARY
            echo "3. Add repository secrets: ANDROID_KEYSTORE_BASE64, ANDROID_KEYSTORE_PASSWORD, ANDROID_KEY_ALIAS, ANDROID_KEY_ALIAS_PASSWORD" >> $GITHUB_STEP_SUMMARY
          fi

  # Optional: Create a release if it's a tagged push
  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download APK artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: LayoutOrchestrator-APKs-*
          path: ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/**/*.apk
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
